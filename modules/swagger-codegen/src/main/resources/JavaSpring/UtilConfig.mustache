package {{configPackage}};

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import org.hibernate.proxy.HibernateProxy;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.io.IOException;

/**
 * Created by famecrave on {{generatedDate}}.
 */
@Configuration
public class UtilConfig {

    @Bean(name = "gsonBuilder")
    public Gson getGson() {
        GsonBuilder b = new GsonBuilder();
        b.registerTypeAdapterFactory(HibernateProxyTypeAdapter.FACTORY);
        return b.create();
    }

    private static class HibernateProxyTypeAdapter extends TypeAdapter<HibernateProxy> {

        public final static TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
                return (HibernateProxy.class.isAssignableFrom(type.getRawType())
                        ? (TypeAdapter<T>) new HibernateProxyTypeAdapter((TypeAdapter) gson.getAdapter(TypeToken.get(type.getRawType().getSuperclass())))
                        : null);
            }
        };
        private final TypeAdapter<Object> delegate;

        private HibernateProxyTypeAdapter(TypeAdapter<Object> delegate) {
            this.delegate = delegate;
        }

        @Override
        public HibernateProxy read(JsonReader in) throws IOException {
            throw new UnsupportedOperationException("Not supported");
        }

        @SuppressWarnings({"rawtypes", "unchecked"})
        @Override
        public void write(JsonWriter out, HibernateProxy value) throws IOException {
            if (value == null) {
                out.nullValue();
                return;
            }
            delegate.write(out, ((HibernateProxy) value).getHibernateLazyInitializer()
                    .getImplementation());
        }
    }
}