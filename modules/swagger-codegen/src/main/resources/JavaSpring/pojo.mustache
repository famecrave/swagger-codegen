{{^noTableAnnotation}}
@Entity
@Table(name = "{{tableName}}")
@Proxy(lazy = false)
{{/noTableAnnotation}}
/**
 * Created by famecrave on {{generatedDate}}.
 */
public class {{classname}} extends BaseModel {
  {{#vars}}
    {{#isEnum}}
    {{^isContainer}}
{{>enumClass}}
    {{/isContainer}}
    {{/isEnum}}
    {{#items.isEnum}}
      {{#items}}
      {{^isContainer}}
{{>enumClass}}
      {{/isContainer}}
      {{/items}}
    {{/items.isEnum}}
    {{#isColumnAnnotation}}
    @Column(name = "{{nameInSnakeCase}}")
    {{/isColumnAnnotation}}
    {{#isOneToManyAnnotation}}
    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true)
    @JoinColumn(name="{{nameInSnakeCase}}_id")
    {{/isOneToManyAnnotation}}
    {{#isManyToOneAnnotation}}
    @ManyToOne
    @JoinColumn(name="{{nameInSnakeCase}}_id")
    {{/isManyToOneAnnotation}}
    {{#isOneToOneAnnotation}}
    @OneToOne
    @JoinColumn(name="{{nameInSnakeCase}}_id")
    {{/isOneToOneAnnotation}}
    {{#isTransient}}
    @Transient
    {{/isTransient}}
    {{#jackson}}
    @JsonProperty("{{nameInSnakeCase}}")
    {{/jackson}}
    {{#gson}}
    @SerializedName("{{baseName}}")
    {{/gson}}
  {{#isContainer}}
  private {{{datatypeWithEnum}}} {{name}};
  {{/isContainer}}
  {{^isContainer}}
  {{#isEnum}}
  @Enumerated(EnumType.STRING)
  {{/isEnum}}
  private {{{datatypeWithEnum}}} {{name}};
  {{/isContainer}}

  {{/vars}}
  {{#vars}}
  {{#isListContainer}}

  public {{classname}} add{{nameInCamelCase}}Item({{{items.datatypeWithEnum}}} {{name}}Item) {
    {{^required}}
    if (this.{{name}} == null) {
      this.{{name}} = {{{defaultValue}}};
    }
    {{/required}}
    this.{{name}}.add({{name}}Item);
    return this;
  }
  {{/isListContainer}}
  {{#isMapContainer}}

  public {{classname}} put{{nameInCamelCase}}Item(String key, {{{items.datatypeWithEnum}}} {{name}}Item) {
    {{^required}}
    if (this.{{name}} == null) {
      this.{{name}} = {{{defaultValue}}};
    }
    {{/required}}
    this.{{name}}.put(key, {{name}}Item);
    return this;
  }
  {{/isMapContainer}}

   /**
  {{#description}}
   * {{{description}}}
  {{/description}}
  {{^description}}
   * Get {{name}}
  {{/description}}
  {{#minimum}}
   * minimum: {{minimum}}
  {{/minimum}}
  {{#maximum}}
   * maximum: {{maximum}}
  {{/maximum}}
   * @return {{name}}
  **/
 {{#vendorExtensions.extraAnnotation}}
  {{{vendorExtensions.extraAnnotation}}}
  {{/vendorExtensions.extraAnnotation}}
  public {{{datatypeWithEnum}}} {{getter}}() {
    return this.{{name}};
  }

  public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
    this.{{name}} = {{name}};
  }

  {{/vars}}

  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }{{#hasVars}}
    {{classname}} {{classVarName}} = ({{classname}}) o;
    return {{#vars}}Objects.equals(this.{{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
        {{/hasMore}}{{/vars}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return true;{{/hasVars}}
  }

  @Override
  public int hashCode() {
    return Objects.hash({{#vars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
    {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
